#----------------------------------------------------------
# Copyright 2017 University of Oxford
# Written by Michael A. Boemo (michael.boemo@path.ox.ac.uk)
# This software is licensed under GPL-3.0.  You should have
# received a copy of the license with this software.  If
# not, please Email the author.
#----------------------------------------------------------

#development script

import sys
import math
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
import numpy as np

#------------------------------------------------------------------------------------------------------------------------------------------
def export_poreModel(emissions):
#	takes a dictionary of emissions produced by trainForAnalogue in train.py and outputs an ONT-style pore model file
#	ARGUMENTS
#       ---------
#	- emissions: keyed by a kmer string, outputs a list with kmer mean and standard deviation (generated by trainForAnalogue)
#	  type: dictionary
#	  type: string
#	OUTPUTS
#       -------
#	- a model file is written to the directory specified

	#open the model file to write on
	f = open('merged.model', 'w')

	#create header
	f.write('#Analogue pore model file trained by Osiris.\n')
	f.write('kmer\ttrMu\ttrSig\toriMu\toriSig\n')

	#write kmer entries
	for key in emissions:
		toWrite = key+'\t'+str(emissions[key][0])+'\t'+str(emissions[key][1])+'\t'+str(emissions[key][2])+'\t'+str(emissions[key][3])+'\n'
		f.write(toWrite)

	#close the model file
	f.close()


#------------------------------------------------------------------------------------------------------------------------------------------
def import_poreModel(filename):
#	takes the filename of an ONT pore model file and returns a map from kmer (string) to [mean,std] (list of floats)
#	ARGUMENTS
#       ---------
#	- filename: path to an ONT model file
#	  type: string
#	OUTPUTS
#       -------
#	- kmer2MeanStd: a map, keyed by a kmer, that returns the model mean and standard deviation signal for that kmer
#	  type: dictionary

	f = open(filename,'r')
	g = f.readlines()
	f.close()

	kmer2MeanStd = {}
	for line in g:
		if line[0] != '#' and line[0:4] != 'kmer': #ignore the header
			splitLine = line.split('\t')
			kmer2MeanStd[ splitLine[0] ] = ( float(splitLine[1]), float(splitLine[2]), float(splitLine[3]), float(splitLine[4]) )
	g = None

	return kmer2MeanStd


#MAIN--------------------------------------------------------------------------------------------------------------------------------------
mergedModel = {}

for f in sys.argv[1:]:
	
	model = import_poreModel(f)
	for key in model:
		if key not in mergedModel:
			mergedModel[key] = model[key]
		else:
			if model[key][2] < mergedModel[key][2]:
				mergedModel[key] = model[key]	

export_poreModel(mergedModel)


